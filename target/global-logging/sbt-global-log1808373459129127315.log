[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\usuario\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\usuario\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 82.5626ms
[debug]       Load.loadUnit: defsScala took 0.427ms
[debug] [Loading] Scanning directory C:\Users\usuario\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usuario\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.7112 ms
[debug]           Load.resolveProject(global-plugins) took 41.4104ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\usuario\.sbt\1.0\plugins, plugins: List(<none>))) took 76.2207ms
[debug] [Loading] Done in C:\Users\usuario\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 98.7016ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2228ms
[debug]     Load.loadUnit(file:/C:/Users/usuario/.sbt/1.0/plugins/, ...) took 195.0036ms
[debug]   Load.apply: load took 377.0727ms
[debug]   Load.apply: resolveProjects took 6.5883ms
[debug]   Load.apply: finalTransforms took 58.6134ms
[debug]   Load.apply: config.delegates took 6.3792ms
[debug]   Load.apply: Def.make(settings)... took 330.6165ms
[debug]   Load.apply: structureIndex took 128.0756ms
[debug]   Load.apply: mkStreams took 1.7576ms
[info] loading global plugins from C:\Users\usuario\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1874.9174ms
[debug]           Load.loadUnit: plugins took 25.7406ms
[debug]           Load.loadUnit: defsScala took 0.0059ms
[debug] [Loading] Scanning directory C:\Users\usuario\IdeaProjects\ProyectoPracticum\project
[debug]             Load.loadUnit: mkEval took 4.1545ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usuario\IdeaProjects\ProyectoPracticum\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3293 ms
[info] loading settings for project proyectopracticum-build from idea.sbt ...
[debug]               Load.resolveProject(proyectopracticum-build) took 7.4732ms
[debug]             Load.loadTransitive: finalizeProject(Project(id proyectopracticum-build, base: C:\Users\usuario\IdeaProjects\ProyectoPracticum\project, plugins: List(<none>))) took 10.3365ms
[debug] [Loading] Done in C:\Users\usuario\IdeaProjects\ProyectoPracticum\project, returning: (proyectopracticum-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 128.8158ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.9106ms
[debug]         Load.loadUnit(file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/project/, ...) took 160.4155ms
[debug]       Load.apply: load took 161.8969ms
[debug]       Load.apply: resolveProjects took 0.1125ms
[debug]       Load.apply: finalTransforms took 10.0543ms
[debug]       Load.apply: config.delegates took 0.3439ms
[debug]       Load.apply: Def.make(settings)... took 83.9691ms
[debug]       Load.apply: structureIndex took 37.4908ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\usuario\IdeaProjects\ProyectoPracticum\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 589.005ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\usuario\IdeaProjects\ProyectoPracticum
[debug]       Load.loadUnit: mkEval took 0.1882ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4597 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 19.7531ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\usuario\IdeaProjects\ProyectoPracticum, plugins: List(<none>))) took 23.2809ms
[debug] [Loading] Done in C:\Users\usuario\IdeaProjects\ProyectoPracticum, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 79.0327ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.3587ms
[debug]   Load.loadUnit(file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/, ...) took 675.0371ms
[debug] Load.apply: load took 676.5865ms
[debug] Load.apply: resolveProjects took 0.089ms
[debug] Load.apply: finalTransforms took 17.8802ms
[debug] Load.apply: config.delegates took 0.3331ms
[debug] Load.apply: Def.make(settings)... took 64.4904ms
[debug] Load.apply: structureIndex took 24.4439ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to ProyectoPracticum (in build file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62811 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62811, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ProyectoPracticum (in build file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/)
[debug] > Exec(idea-shell, None, None)
