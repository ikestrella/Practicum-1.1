[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\usuario\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\usuario\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 104.8322ms
[debug]       Load.loadUnit: defsScala took 0.2838ms
[debug] [Loading] Scanning directory C:\Users\usuario\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usuario\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.9472 ms
[debug]           Load.resolveProject(global-plugins) took 55.8013ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\usuario\.sbt\1.0\plugins, plugins: List(<none>))) took 103.8539ms
[debug] [Loading] Done in C:\Users\usuario\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 137.3003ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2845ms
[debug]     Load.loadUnit(file:/C:/Users/usuario/.sbt/1.0/plugins/, ...) took 255.4816ms
[debug]   Load.apply: load took 480.1146ms
[debug]   Load.apply: resolveProjects took 5.3866ms
[debug]   Load.apply: finalTransforms took 55.824ms
[debug]   Load.apply: config.delegates took 8.3842ms
[debug]   Load.apply: Def.make(settings)... took 345.6159ms
[debug]   Load.apply: structureIndex took 105.7045ms
[debug]   Load.apply: mkStreams took 0.9364ms
[info] loading global plugins from C:\Users\usuario\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2143.818ms
[debug]           Load.loadUnit: plugins took 20.9686ms
[debug]           Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\usuario\IdeaProjects\ProyectoPracticum\project
[debug]             Load.loadUnit: mkEval took 5.5631ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\usuario\IdeaProjects\ProyectoPracticum\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9952 ms
[info] loading settings for project proyectopracticum-build from idea.sbt ...
[debug]               Load.resolveProject(proyectopracticum-build) took 2.9373ms
[debug]             Load.loadTransitive: finalizeProject(Project(id proyectopracticum-build, base: C:\Users\usuario\IdeaProjects\ProyectoPracticum\project, plugins: List(<none>))) took 5.5635ms
[debug] [Loading] Done in C:\Users\usuario\IdeaProjects\ProyectoPracticum\project, returning: (proyectopracticum-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 119.5659ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.3823ms
[debug]         Load.loadUnit(file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/project/, ...) took 145.5974ms
[debug]       Load.apply: load took 147.0306ms
[debug]       Load.apply: resolveProjects took 0.0786ms
[debug]       Load.apply: finalTransforms took 8.6598ms
[debug]       Load.apply: config.delegates took 0.3672ms
[debug]       Load.apply: Def.make(settings)... took 67.1901ms
[debug]       Load.apply: structureIndex took 27.698ms
[debug]       Load.apply: mkStreams took 0.0018ms
[info] loading project definition from C:\Users\usuario\IdeaProjects\ProyectoPracticum\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 522.1211ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\usuario\IdeaProjects\ProyectoPracticum
[debug]       Load.loadUnit: mkEval took 0.1681ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.993 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 20.915ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\usuario\IdeaProjects\ProyectoPracticum, plugins: List(<none>))) took 24.1926ms
[debug] [Loading] Done in C:\Users\usuario\IdeaProjects\ProyectoPracticum, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2347.2747ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.1236ms
[debug]   Load.loadUnit(file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/, ...) took 2883.1708ms
[debug] Load.apply: load took 2884.802ms
[debug] Load.apply: resolveProjects took 0.0944ms
[debug] Load.apply: finalTransforms took 25.0293ms
[debug] Load.apply: config.delegates took 0.6234ms
[debug] Load.apply: Def.make(settings)... took 52.0226ms
[debug] Load.apply: structureIndex took 26.429ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to ProyectoPracticum (in build file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62933 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62933, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ProyectoPracticum (in build file:/C:/Users/usuario/IdeaProjects/ProyectoPracticum/)
[debug] > Exec(idea-shell, None, None)
